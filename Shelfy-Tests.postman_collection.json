{
	"info": {
		"_postman_id": "2c423f5e-3cdb-43ed-bd65-288578d529c1",
		"name": "Shelfy-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Session",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Create New Session - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.accessToken\");",
											"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
											"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
											"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/create",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Session - Fail: non UUID application Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"            pm.test(\"Response format is ok\", function () {",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"applicationId\": \"{{badApplicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/create",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Refresh",
					"item": [
						{
							"name": "Create New Session - Success: for refresh session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.accessToken\");",
											"            pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
											"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken)",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/create",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Session: Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.accessToken\");",
											"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
											"})}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"accessToken\": \"{{accessToken}}\",\n        \"refreshToken\": \"{{refreshToken}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/refresh",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"refresh"
									]
								},
								"description": "<h1> Create Session</h1>\n<h2>Request</h2>\n<b>applicationId</b>- is a string in <b>UUID</b> format. The application gets it from CI.\n<br/>\n<b>deviceType</b> - is a string <br/>\nThe application can understood what is the platform it is working with help of dart.io package:\n<img src=\"https://storage.googleapis.com/su-documentation/mobile-rest-apis/Screen%20Shot%202021-06-23%20at%2012.51.45.png\" alt=\"\" title=\"Example\" />\n</br>\n\n<h2> Response </h2>\n<b>accessToken</b> - is a string in UUID format. <br/>\nThis token the application must send in every other request.<br/>\n<b>refreshToken</b> - is a string in UUID format. \nThis token the application will use in case of it received 403 code from any request from the backend. <i><b>important!!!</b></i> The fileStorage - is not the backend.<br/>\n<br/>\n\n<h2> Errors </h2>\n\nThere is no validation for deviceType, it is possible to send any value.<br/>\nIn case of not valid applicationId string - the API returns 4xx exception."
							},
							"response": []
						},
						{
							"name": "Refresh Session: Fail - Bad Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"})}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"accessToken\": \"{{accessToken}}\",\n        \"refreshToken\": \"{{refreshToken}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/refresh",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"refresh"
									]
								},
								"description": "<h1> Create Session</h1>\n<h2>Request</h2>\n<b>applicationId</b>- is a string in <b>UUID</b> format. The application gets it from CI.\n<br/>\n<b>deviceType</b> - is a string <br/>\nThe application can understood what is the platform it is working with help of dart.io package:\n<img src=\"https://storage.googleapis.com/su-documentation/mobile-rest-apis/Screen%20Shot%202021-06-23%20at%2012.51.45.png\" alt=\"\" title=\"Example\" />\n</br>\n\n<h2> Response </h2>\n<b>accessToken</b> - is a string in UUID format. <br/>\nThis token the application must send in every other request.<br/>\n<b>refreshToken</b> - is a string in UUID format. \nThis token the application will use in case of it received 403 code from any request from the backend. <i><b>important!!!</b></i> The fileStorage - is not the backend.<br/>\n<br/>\n\n<h2> Errors </h2>\n\nThere is no validation for deviceType, it is possible to send any value.<br/>\nIn case of not valid applicationId string - the API returns 4xx exception."
							},
							"response": []
						},
						{
							"name": "Refresh Session: Fail - Bad Refresh Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"})}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"accessToken\": \"{{accessToken}}\",\n        \"refreshToken\": \"{{refreshToken}}111\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/refresh",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"refresh"
									]
								},
								"description": "<h1> Create Session</h1>\n<h2>Request</h2>\n<b>applicationId</b>- is a string in <b>UUID</b> format. The application gets it from CI.\n<br/>\n<b>deviceType</b> - is a string <br/>\nThe application can understood what is the platform it is working with help of dart.io package:\n<img src=\"https://storage.googleapis.com/su-documentation/mobile-rest-apis/Screen%20Shot%202021-06-23%20at%2012.51.45.png\" alt=\"\" title=\"Example\" />\n</br>\n\n<h2> Response </h2>\n<b>accessToken</b> - is a string in UUID format. <br/>\nThis token the application must send in every other request.<br/>\n<b>refreshToken</b> - is a string in UUID format. \nThis token the application will use in case of it received 403 code from any request from the backend. <i><b>important!!!</b></i> The fileStorage - is not the backend.<br/>\n<br/>\n\n<h2> Errors </h2>\n\nThere is no validation for deviceType, it is possible to send any value.<br/>\nIn case of not valid applicationId string - the API returns 4xx exception."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Registration/SignUp",
					"item": [
						{
							"name": "Registration With Address And Store",
							"item": [
								{
									"name": "Create New Session - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Registration With Address And Store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"            pm.environment.set(\"registrationStoreId\", pm.environment.get(\"storeId\"));",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(pm.environment.get(\"project\"))",
													"",
													"if (pm.environment.get(\"project\") == \"shopify\")",
													"    setTimeout(function(){}, 2000);",
													"",
													"const userName = pm.environment.replaceIn(\"{{$randomFirstName}}{{$randomInt}}@mail.ru\");",
													"pm.environment.set(\"userName\",  userName);",
													"    ",
													"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}\");",
													"pm.environment.set(\"addressLine1\", addressLine1);",
													"",
													"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
													"pm.environment.set(\"addressLine2\", addressLine2);",
													"",
													"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
													"",
													"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"city\", city);",
													"",
													"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"companyName\", companyName);",
													"",
													"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"house\", house);",
													"",
													"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"addressName\", addressName);",
													"",
													"const country = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"country\", country);",
													"",
													"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"zipCode\", zipCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userName}}\"\n    },\n    \"type\": \"email\",\n    \"address\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n        \"country\": \"Israel\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n    },  \n    \"profile\": {\n        \"birthDate\": \"{{birthDate}}\",\n        \"email\": \"{{userName}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"gender\": \"{{gender}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    },\n    \"storeId\": \"{{storeId}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signup",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Profile - Success: check active data after registration (address and store)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.active.address).not.eq(null);",
													"            pm.expect(jsonData.data.active.store).eq(pm.environment.get(\"registrationStoreId\"));;",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Addresses - Success: check address was created during the registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(1);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/addresses",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Stores - Success: check store was created during the registration Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(1);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Registration With Address",
							"item": [
								{
									"name": "Create New Session - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Registration With Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"",
													"const userName = pm.environment.replaceIn(\"{{$randomFirstName}}{{$randomInt}}@mail.ru\");",
													"pm.environment.set(\"userName\",  userName);",
													"    ",
													"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}@shelfytest.io\");",
													"pm.environment.set(\"addressLine1\", addressLine1);",
													"",
													"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
													"pm.environment.set(\"addressLine2\", addressLine2);",
													"",
													"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
													"",
													"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"city\", city);",
													"",
													"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"companyName\", companyName);",
													"",
													"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"house\", house);",
													"",
													"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"addressName\", addressName);",
													"",
													"const country = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"country\", country);",
													"",
													"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"zipCode\", zipCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userName}}\"\n    },\n    \"type\": \"email\",\n    \"address\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n       \"country\": \"Israel\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n    },  \n    \"profile\": {\n        \"birthDate\": \"string\",\n        \"email\": \"string\",\n        \"firstName\": \"string\",\n        \"gender\": \"string\",\n        \"lastName\": \"string\",\n        \"middleName\": \"string\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signup",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Profile - Success: check active data after registration (address)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.active.address).not.eq(null);",
													"            pm.expect(jsonData.data.active.store).eq(null);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Addresses - Success: check address was created during the registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(1);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/addresses",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Stores - Success: check store was created during the registration Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(0);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Registration With Store",
							"item": [
								{
									"name": "Create New Session - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Registration With Store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"",
													"const userName = pm.environment.replaceIn(\"{{$randomFirstName}}{{$randomInt}}@smail.ru\");",
													"pm.environment.set(\"userName\", \"1\" + userName);",
													"    ",
													"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}@shelfytest.io\");",
													"pm.environment.set(\"addressLine1\", addressLine1);",
													"",
													"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
													"pm.environment.set(\"addressLine2\", addressLine2);",
													"",
													"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
													"",
													"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"city\", city);",
													"",
													"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"companyName\", companyName);",
													"",
													"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"house\", house);",
													"",
													"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"addressName\", addressName);",
													"",
													"const country = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"country\", country);",
													"",
													"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"zipCode\", zipCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userName}}\"\n    },\n    \"type\": \"email\",\n    \"profile\": {\n        \"birthDate\": \"string\",\n        \"email\": \"string\",\n        \"firstName\": \"string\",\n        \"gender\": \"string\",\n        \"lastName\": \"string\",\n        \"middleName\": \"string\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    },\n    \"storeId\": \"{{storeId}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signup",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Profile - Success: check active data after registration (store)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.active.address).eq(null);",
													"            pm.expect(jsonData.data.active.store).eq(pm.environment.get(\"registrationStoreId\"));",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Addresses - Success: check address was created during the registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(0);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/addresses",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Stores - Success: check store was created during the registration Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(1);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Registration With Out Store And Address",
							"item": [
								{
									"name": "Create New Session - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Registration With Out Store And Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"        ",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"",
													"const userName = pm.environment.replaceIn(\"{{$randomFirstName}}{{$randomInt}}@mail.ru\");",
													"pm.environment.set(\"userName\",  userName);",
													"pm.environment.set(\"loginSuccess\", userName);",
													"    ",
													"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}@shelfytest.io\");",
													"pm.environment.set(\"addressLine1\", addressLine1);",
													"",
													"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
													"pm.environment.set(\"addressLine2\", addressLine2);",
													"",
													"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
													"",
													"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"city\", city);",
													"",
													"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"companyName\", companyName);",
													"",
													"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"house\", house);",
													"",
													"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"addressName\", addressName);",
													"",
													"const country = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"country\", country);",
													"",
													"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"zipCode\", zipCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userName}}\"\n    },\n    \"type\": \"email\",\n    \"profile\": {\n        \"birthDate\": \"string\",\n        \"email\": \"string\",\n        \"firstName\": \"string\",\n        \"gender\": \"string\",\n        \"lastName\": \"string\",\n        \"middleName\": \"string\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signup",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Profile - Success: check active data after registration (without address and without store)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.active.address).eq(null);",
													"            pm.expect(jsonData.data.active.store).eq(null);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Addresses - Success: check address was created during the registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(0);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/addresses",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Stores - Success: check store was created during the registration Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"            pm.expect(jsonData.data.length).eq(0);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Registration And Merging Anonymous Data",
							"item": [
								{
									"name": "Create New Session - Success: merging registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set batch product - Success: merging registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"            pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.productId1\");",
													"            pm.response.to.have.jsonBody(\"data.productId2\");",
													"            pm.response.to.have.jsonBody(\"data.productId3\");",
													"            pm.expect(jsonData.data.productId1.comment).eq(\"xx\");  ",
													"            pm.expect(jsonData.data.productId2.isFavorite).eq(true);  ",
													"            pm.expect(jsonData.data.productId3.rate).eq(5);  ",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rates\": {\n    \"productId1\": {\n        \"comment\": \"xx\"\n    },\n    \"productId2\": {\n        \"isFavorite\": true\n    },\n    \"productId3\": {\n        \"rate\": 5\n    }   \n    }\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/products/multi/rate",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"products",
												"multi",
												"rate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Registration With Address And Store: Success merging registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);",
													"const userName = pm.environment.replaceIn(\"{{$randomFirstName}}{{$randomInt}}@mail.ru\");",
													"pm.environment.set(\"userNameMigration\",  userName);",
													"",
													"const registrationStoreId = pm.environment.replaceIn(\"{{$randomFirstName}}\");",
													"pm.environment.set(\"registrationStoreId\",  registrationStoreId);",
													"console.log(\"lololo\", pm.environment.get(\"registrationStoreId\"))",
													"",
													"",
													"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}@shelfytest.io\");",
													"pm.environment.set(\"addressLine1\", addressLine1);",
													"",
													"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
													"pm.environment.set(\"addressLine2\", addressLine2);",
													"",
													"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
													"",
													"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"city\", city);",
													"",
													"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"companyName\", companyName);",
													"",
													"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"house\", house);",
													"",
													"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
													"pm.environment.set(\"addressName\", addressName);",
													"",
													"const country = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"country\", country);",
													"",
													"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
													"pm.environment.set(\"zipCode\", zipCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"    });",
													"})",
													"",
													"pm.test(\"JWT Token Contains Data After Registration\", function() {",
													"    console.log();",
													"    var token = pm.response.headers.get(\"X-JWT-Token\");",
													"    pm.expect(token).not.null;",
													"",
													"    const payload = token.split('.')[1];  ",
													"    const parsed = JSON.parse(atob(payload));",
													"    pm.expect(parsed.userId).not.null;",
													"    pm.expect(parsed.originalUserId).not.null;",
													"});",
													"",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userNameMigration}}\"\n    },\n    \"type\": \"email\",\n    \"address\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n       \"country\": \"Israel\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n    },  \n    \"profile\": {\n        \"birthDate\": \"{{birthDate}}\",\n        \"email\": \"{{userName}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"gender\": \"{{gender}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    },\n    \"storeId\": \"{{registrationStoreId}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signup",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user cart: Success - with severl products, excluding quantity 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.null;",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.name).eq(\"string\");",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Get User Profile - Success: merging registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"    ",
													"            // pm.expect(jsonData.data.active.address).not.eq(pm.environment.get(\"addressId\"));",
													"            pm.expect(jsonData.data.active.store).eq(pm.environment.get(\"registrationStoreId\"));",
													"            //pm.expect(jsonData.data.active.cart).eq(pm.environment.get(\"cartId\"));",
													"    });",
													"})",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Stores - Success: merging registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"",
													"            function checkStoreId(store) {",
													"                return store.storeId === pm.environment.get(\"storeId\");",
													"            }",
													"",
													"            function checkRegistredStoreId(store) {",
													"                return store.storeId === pm.environment.get(\"storeId\");",
													"            }",
													"            ",
													"            pm.expect(jsonData.data.find(checkStoreId)).not.null",
													"            pm.expect(jsonData.data.find(checkRegistredStoreId)).not.null",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User's Products - Success: merging registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"            pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.productId1\");",
													"            pm.response.to.have.jsonBody(\"data.productId2\");",
													"            pm.response.to.have.jsonBody(\"data.productId3\");",
													"            pm.expect(Object.keys(jsonData.data).length).eq(3);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"storeId\", storeId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/products",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"products"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Registration - Fail: user exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 422\", function () {",
											"        pm.response.to.have.status(422);",
											"            pm.test(\"Response format is ok\", function () {",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userName}}\"\n    },\n    \"type\": \"email\",\n    \"address\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n        \"country\": \"{{country}}\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n    },\n    \"profile\": {\n        \"birthDate\": \"{{birthDate}}\",\n        \"email\": \"{{userName}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"gender\": \"{{gender}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    },\n    \"storeId\": \"{{storeId}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signup",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"            pm.test(\"Response format is ok\", function () {",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);",
											"",
											"const userName = pm.environment.replaceIn(\"{{$randomFirstName}}@shelfytest.io\");",
											"pm.environment.set(\"userName\",  userName);",
											"    ",
											"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}@shelfytest.io\");",
											"pm.environment.set(\"addressLine1\", addressLine1);",
											"",
											"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
											"pm.environment.set(\"addressLine2\", addressLine2);",
											"",
											"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
											"",
											"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"city\", city);",
											"",
											"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"companyName\", companyName);",
											"",
											"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"house\", house);",
											"",
											"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"addressName\", addressName);",
											"",
											"const country = pm.environment.replaceIn(\"{{$randomCountry}}\");",
											"pm.environment.set(\"country\", country);",
											"",
											"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
											"pm.environment.set(\"zipCode\", zipCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userName}}\"\n    },\n    \"type\": \"email\",\n    \"address\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n        \"country\": \"{{country}}\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n    },\n    \"profile\": {\n        \"birthDate\": \"{{birthDate}}\",\n        \"email\": \"{{userName}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"gender\": \"{{gender}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    },\n    \"storeId\": \"{{storeId}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signup",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration - Fail: bad registration \"type\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"            pm.test(\"Response format is ok\", function () {",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);",
											"",
											"const userName = pm.environment.replaceIn(\"{{$randomFirstName}}@shelfytest.io\");",
											"pm.environment.set(\"userName\",  userName);",
											"    ",
											"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}@shelfytest.io\");",
											"pm.environment.set(\"addressLine1\", addressLine1);",
											"",
											"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
											"pm.environment.set(\"addressLine2\", addressLine2);",
											"",
											"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
											"",
											"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"city\", city);",
											"",
											"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"companyName\", companyName);",
											"",
											"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"house\", house);",
											"",
											"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"addressName\", addressName);",
											"",
											"const country = pm.environment.replaceIn(\"{{$randomCountry}}\");",
											"pm.environment.set(\"country\", country);",
											"",
											"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
											"pm.environment.set(\"zipCode\", zipCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"password\": \"{{password}}\",\n        \"username\": \"{{userName}}\"\n    },\n    \"type\": \"email111\",\n    \"address\": {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n        \"country\": \"{{country}}\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n    },\n    \"profile\": {\n        \"birthDate\": \"{{birthDate}}\",\n        \"email\": \"{{userName}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"gender\": \"{{gender}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"mobilePhone\": \"{{mobilePhone}}\",\n        \"subscriptions\": [\n            {\n                \"id\": \"string\",\n                \"name\": \"string\"\n            }\n        ]\n    },\n    \"storeId\": \"{{storeId}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signup",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signup"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login/SignIn",
					"item": [
						{
							"name": "Login And Merging Anonymous Data",
							"item": [
								{
									"name": "Create New Session - Success: merging login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Store - Success: merging login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"storeId\", storeId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"storeId\": {{storeId}}\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set batch product - Success: merging login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"            pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.productId1\");",
													"            pm.response.to.have.jsonBody(\"data.productId2\");",
													"            pm.response.to.have.jsonBody(\"data.productId3\");",
													"            pm.expect(jsonData.data.productId1.comment).eq(\"xx\");  ",
													"            pm.expect(jsonData.data.productId2.isFavorite).eq(true);  ",
													"            pm.expect(jsonData.data.productId3.rate).eq(5);  ",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rates\": {\n    \"productId1\": {\n        \"comment\": \"xx\"\n    },\n    \"productId2\": {\n        \"isFavorite\": true\n    },\n    \"productId3\": {\n        \"rate\": 5\n    }   \n    }\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/products/multi/rate",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"products",
												"multi",
												"rate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user cart: Success - with severl products, excluding quantity 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.null;",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.name).eq(\"string\");",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 5\n        },\n        {\n            \"variantId\": \"string10\",\n            \"productId\": \"string10\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Login - Success: migration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"    });",
													"})",
													"",
													"pm.test(\"JWT Token Contains Data After Login\", function() {",
													"    console.log();",
													"    var token = pm.response.headers.get(\"X-JWT-Token\");",
													"    pm.expect(token).not.null;",
													"",
													"    const payload = token.split('.')[1];  ",
													"    const parsed = JSON.parse(atob(payload));",
													"    pm.expect(parsed.userId).not.null;",
													"    pm.expect(parsed.originalUserId).not.null;",
													"});",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										},
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{userNameMigration}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signin",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Profile - Success: merging registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            // pm.expect(jsonData.data.active.address).eq(pm.environment.get(\"addressId\"));",
													"            pm.expect(jsonData.data.active.store).eq(pm.environment.get(\"storeId\"));",
													"            //pm.expect(jsonData.data.active.cart).eq(pm.environment.get(\"cartId\"));",
													"    });",
													"})",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All User's Stores - Success: merging registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data).to.be.a('array');",
													"",
													"            function checkStoreId(store) {",
													"                return store.storeId === pm.environment.get(\"storeId\");",
													"            }",
													"       ",
													"            pm.expect(jsonData.data.find(checkStoreId)).not.null",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Cart By \"Current\": Success Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            var products = jsonData.data.products;",
													"            pm.expect(products.length).eq(3.0);",
													"            for (var i=0;i<products.length; i++) {",
													"                if (products[i].productId == \"string\" && products[i].variantId == \"string\") {",
													"                    pm.expect(products[i].quantity).eq(5.0);",
													"                }",
													"            }",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Get User's Products - Success: merging login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"            pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.productId1\");",
													"            pm.response.to.have.jsonBody(\"data.productId2\");",
													"            pm.response.to.have.jsonBody(\"data.productId3\");",
													"            pm.expect(Object.keys(jsonData.data).length).eq(3);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"storeId\", storeId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/products",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"products"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
											"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{loginSuccess}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signin",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 403\", function () {",
											"        console.log(pm.response.status);",
											"        pm.response.to.have.status(403);",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{userName}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signin",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Fail: bad userName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 401\", function () {",
											"        pm.response.to.have.status(401);",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"1{{userName}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signin",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Fail: bad password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 401\", function () {",
											"        pm.response.to.have.status(401);",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{badPassword}}\",\n    \"username\": \"{{userName}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signin",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Fail: bad username and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 401\", function () {",
											"        pm.response.to.have.status(401);",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{badPassword}}\",\n    \"username\": \"1{{userName}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signin",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signin"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check User Exists",
					"item": [
						{
							"name": "Check User Exists - Fail: too many requests",
							"item": [
								{
									"name": "Check User Exists - Attempt #1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{userName}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/check",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"check"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check User Exists  - Attempt #2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{userName}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/check",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"check"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check User Exists  - Attempt #3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    pm.test(\"Status code is 429\", function () {",
													"        pm.response.to.have.status(429);",
													"    })",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{userName}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/check",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"check"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check User Exists - Success: user exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 61000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.isExist\");",
											"            pm.expect(jsonData.data.isExist).eq(true)",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{loginSuccess}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/check",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"check"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check User Exists - Success: user DOES NOT exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.isExist\");",
											"            pm.expect(jsonData.data.isExist).eq(false)",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"11{{userName}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/check",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"check"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check User Exists - Fail: bad access token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{userName}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/check",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"check"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout/SignOut",
					"item": [
						{
							"name": "Logout - Success",
							"item": [
								{
									"name": "Create New Session - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessTokenForLogoutScenario\", jsonData.data.accessToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										},
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessTokenForLogoutScenario}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessTokenForLogoutScenario}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{loginSuccess}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signin",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "Log Out - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessTokenForLogoutScenario}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessTokenForLogoutScenario}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/authorization/signout",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check User Exists - Fail: bad access token after logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    pm.test(\"Status code is 403\", function () {",
													"        pm.environment.get(\"variable_key\");",
													"    pm.response.to.have.status(403);",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessTokenForLogoutScenario}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessTokenForLogoutScenario}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"11{{userName}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/check",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"check"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Log Out - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/authorization/signout",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partial Authorization",
					"item": [
						{
							"name": "Partial Authorization: Success - apple user exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectedData\": {\n        \"identityToken\": \"eyJraWQiOiJZdXlYb1kiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoic2hlbGZ5Lm5nLnNoZWxmeU5nIiwiZXhwIjoxNjI4NzYwNDkxLCJpYXQiOjE2Mjg2NzQwOTEsInN1YiI6IjAwMDcxMy4xZjFhNzgzNDY4OTg0NGUzYWY2ODBhOTc4Yzg3NjYwNy4xMDE4IiwiY19oYXNoIjoic04xQk9BdEN2clZWZjRsWDBCeDNFUSIsImVtYWlsIjoicnlhbmhlaXRuZXJAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOiJ0cnVlIiwiYXV0aF90aW1lIjoxNjI4Njc0MDkxLCJub25jZV9zdXBwb3J0ZWQiOnRydWUsInJlYWxfdXNlcl9zdGF0dXMiOjJ9.X2kYhELa3qwC_nVYdonGAn-BGRg_14BP52PpdD2VoRZb_HcC9Guq1DlePUjFxo0B-O9H4M3s4ziWGorcqKBV7NNXLBmZVTZFmOJCWUvSeuoZSTQXhBKkTEPQ_79wWH4fGHEtJC8e21Gvp1Viq-DdRMpsw6ozzJrsacTONE1SaMYX9_BJVJphbcG6IR6nlcf3rg2VvC8JRquflwX7WdDfW9dizAc4WnajKq0kX968i9OwIs_ntKher4rDN-3UjmvQ8ONctpl2x3gq7LSn9FT7fpmYN8MYMblpdELxUqUwqVNPeTZjnI7juGfawKr9pFLwILyjvTq6D0GcNopeBVjYDQ\"\n    },\n    \"password\": \"string\",\n    \"step\": \"string\",\n    \"type\": \"apple\",\n    \"username\": \"string\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/partial-authorization",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"partial-authorization"
									]
								},
								"description": "<h1>Partial Authorization</h1>\n<h2>Request</h2>\n<b>username</b> - a string, without any validation<br/>\n<b>password</b> - a string, without any validation<br/>\n<b>type</b> - a string, type of login/registration, possible values: email, apple, facebook, google<br/>\n<b>step</b> - a string, the current \"page/screen\" where a user stays.<br/>\n<b>collectedData</b> - a map (string, object), here client puts data that it collected during the \"feature step\", for example in case of social login - BE expects to get credentials data from 3td parties (full object of \"get facebook token\", \"get apple credentials\")<br/>\n\n<h1>Response</h1>\n<b>originalUserId</b> - a string, if returned not null, it means that the user logged in, but the application should still follow the instructions from \"flowConfiguration\"<br/>\n<b>flowConfiguration</b> - a json array that presents instructions for the next steps in the onboarding flow.<br/>"
							},
							"response": []
						},
						{
							"name": "Partial Authorization: Fail - bad registration type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectedData\": {\n        \"identityToken\": \"eyJraWQiOiJZdXlYb1kiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoic2hlbGZ5Lm5nLnNoZWxmeU5nIiwiZXhwIjoxNjI4NzYwNDkxLCJpYXQiOjE2Mjg2NzQwOTEsInN1YiI6IjAwMDcxMy4xZjFhNzgzNDY4OTg0NGUzYWY2ODBhOTc4Yzg3NjYwNy4xMDE4IiwiY19oYXNoIjoic04xQk9BdEN2clZWZjRsWDBCeDNFUSIsImVtYWlsIjoicnlhbmhlaXRuZXJAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOiJ0cnVlIiwiYXV0aF90aW1lIjoxNjI4Njc0MDkxLCJub25jZV9zdXBwb3J0ZWQiOnRydWUsInJlYWxfdXNlcl9zdGF0dXMiOjJ9.X2kYhELa3qwC_nVYdonGAn-BGRg_14BP52PpdD2VoRZb_HcC9Guq1DlePUjFxo0B-O9H4M3s4ziWGorcqKBV7NNXLBmZVTZFmOJCWUvSeuoZSTQXhBKkTEPQ_79wWH4fGHEtJC8e21Gvp1Viq-DdRMpsw6ozzJrsacTONE1SaMYX9_BJVJphbcG6IR6nlcf3rg2VvC8JRquflwX7WdDfW9dizAc4WnajKq0kX968i9OwIs_ntKher4rDN-3UjmvQ8ONctpl2x3gq7LSn9FT7fpmYN8MYMblpdELxUqUwqVNPeTZjnI7juGfawKr9pFLwILyjvTq6D0GcNopeBVjYDQ\"\n    },\n    \"password\": \"string\",\n    \"step\": \"string\",\n    \"type\": \"apple111\",\n    \"username\": \"string\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/partial-authorization",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"partial-authorization"
									]
								},
								"description": "<h1>Partial Authorization</h1>\n<h2>Request</h2>\n<b>username</b> - a string, without any validation<br/>\n<b>password</b> - a string, without any validation<br/>\n<b>type</b> - a string, type of login/registration, possible values: email, apple, facebook, google<br/>\n<b>step</b> - a string, the current \"page/screen\" where a user stays.<br/>\n<b>collectedData</b> - a map (string, object), here client puts data that it collected during the \"feature step\", for example in case of social login - BE expects to get credentials data from 3td parties (full object of \"get facebook token\", \"get apple credentials\")<br/>\n\n<h1>Response</h1>\n<b>originalUserId</b> - a string, if returned not null, it means that the user logged in, but the application should still follow the instructions from \"flowConfiguration\"<br/>\n<b>flowConfiguration</b> - a json array that presents instructions for the next steps in the onboarding flow.<br/>"
							},
							"response": []
						},
						{
							"name": "Partial Authorization: Fail - bad collectedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectedData\": {\n        \"_identityToken\": \"eyJraWQiOiJZdXlYb1kiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoic2hlbGZ5Lm5nLnNoZWxmeU5nIiwiZXhwIjoxNjI4NzYwNDkxLCJpYXQiOjE2Mjg2NzQwOTEsInN1YiI6IjAwMDcxMy4xZjFhNzgzNDY4OTg0NGUzYWY2ODBhOTc4Yzg3NjYwNy4xMDE4IiwiY19oYXNoIjoic04xQk9BdEN2clZWZjRsWDBCeDNFUSIsImVtYWlsIjoicnlhbmhlaXRuZXJAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOiJ0cnVlIiwiYXV0aF90aW1lIjoxNjI4Njc0MDkxLCJub25jZV9zdXBwb3J0ZWQiOnRydWUsInJlYWxfdXNlcl9zdGF0dXMiOjJ9.X2kYhELa3qwC_nVYdonGAn-BGRg_14BP52PpdD2VoRZb_HcC9Guq1DlePUjFxo0B-O9H4M3s4ziWGorcqKBV7NNXLBmZVTZFmOJCWUvSeuoZSTQXhBKkTEPQ_79wWH4fGHEtJC8e21Gvp1Viq-DdRMpsw6ozzJrsacTONE1SaMYX9_BJVJphbcG6IR6nlcf3rg2VvC8JRquflwX7WdDfW9dizAc4WnajKq0kX968i9OwIs_ntKher4rDN-3UjmvQ8ONctpl2x3gq7LSn9FT7fpmYN8MYMblpdELxUqUwqVNPeTZjnI7juGfawKr9pFLwILyjvTq6D0GcNopeBVjYDQ\"\n    },\n    \"password\": \"string\",\n    \"step\": \"string\",\n    \"type\": \"apple\",\n    \"username\": \"string\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/partial-authorization",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"partial-authorization"
									]
								},
								"description": "<h1>Partial Authorization</h1>\n<h2>Request</h2>\n<b>username</b> - a string, without any validation<br/>\n<b>password</b> - a string, without any validation<br/>\n<b>type</b> - a string, type of login/registration, possible values: email, apple, facebook, google<br/>\n<b>step</b> - a string, the current \"page/screen\" where a user stays.<br/>\n<b>collectedData</b> - a map (string, object), here client puts data that it collected during the \"feature step\", for example in case of social login - BE expects to get credentials data from 3td parties (full object of \"get facebook token\", \"get apple credentials\")<br/>\n\n<h1>Response</h1>\n<b>originalUserId</b> - a string, if returned not null, it means that the user logged in, but the application should still follow the instructions from \"flowConfiguration\"<br/>\n<b>flowConfiguration</b> - a json array that presents instructions for the next steps in the onboarding flow.<br/>"
							},
							"response": []
						},
						{
							"name": "Partial Authorization: Fail - bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}1111",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectedData\": {\n        \"identityToken\": \"eyJraWQiOiJZdXlYb1kiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoic2hlbGZ5Lm5nLnNoZWxmeU5nIiwiZXhwIjoxNjI4NzYwNDkxLCJpYXQiOjE2Mjg2NzQwOTEsInN1YiI6IjAwMDcxMy4xZjFhNzgzNDY4OTg0NGUzYWY2ODBhOTc4Yzg3NjYwNy4xMDE4IiwiY19oYXNoIjoic04xQk9BdEN2clZWZjRsWDBCeDNFUSIsImVtYWlsIjoicnlhbmhlaXRuZXJAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOiJ0cnVlIiwiYXV0aF90aW1lIjoxNjI4Njc0MDkxLCJub25jZV9zdXBwb3J0ZWQiOnRydWUsInJlYWxfdXNlcl9zdGF0dXMiOjJ9.X2kYhELa3qwC_nVYdonGAn-BGRg_14BP52PpdD2VoRZb_HcC9Guq1DlePUjFxo0B-O9H4M3s4ziWGorcqKBV7NNXLBmZVTZFmOJCWUvSeuoZSTQXhBKkTEPQ_79wWH4fGHEtJC8e21Gvp1Viq-DdRMpsw6ozzJrsacTONE1SaMYX9_BJVJphbcG6IR6nlcf3rg2VvC8JRquflwX7WdDfW9dizAc4WnajKq0kX968i9OwIs_ntKher4rDN-3UjmvQ8ONctpl2x3gq7LSn9FT7fpmYN8MYMblpdELxUqUwqVNPeTZjnI7juGfawKr9pFLwILyjvTq6D0GcNopeBVjYDQ\"\n    },\n    \"password\": \"string\",\n    \"step\": \"string\",\n    \"type\": \"apple\",\n    \"username\": \"string\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/partial-authorization",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"partial-authorization"
									]
								},
								"description": "<h1>Partial Authorization</h1>\n<h2>Request</h2>\n<b>username</b> - a string, without any validation<br/>\n<b>password</b> - a string, without any validation<br/>\n<b>type</b> - a string, type of login/registration, possible values: email, apple, facebook, google<br/>\n<b>step</b> - a string, the current \"page/screen\" where a user stays.<br/>\n<b>collectedData</b> - a map (string, object), here client puts data that it collected during the \"feature step\", for example in case of social login - BE expects to get credentials data from 3td parties (full object of \"get facebook token\", \"get apple credentials\")<br/>\n\n<h1>Response</h1>\n<b>originalUserId</b> - a string, if returned not null, it means that the user logged in, but the application should still follow the instructions from \"flowConfiguration\"<br/>\n<b>flowConfiguration</b> - a json array that presents instructions for the next steps in the onboarding flow.<br/>"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get Profile",
					"item": [
						{
							"name": "Get User Profile - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Profile - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Profile",
					"item": [
						{
							"name": "Update User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    })",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"pm.response.to.have.jsonBody(\"data\");",
											"",
											"pm.test(\"Response format: active.address is ok\", function () {",
											"    pm.expect(jsonData.data.active.address).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: acrive.cart is ok\", function () {",
											"    pm.expect(jsonData.data.active.cart).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: active.creditCard is ok\", function () {",
											"    pm.expect(jsonData.data.active.creditCard).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: active.deliveryMethod is ok\", function () {",
											"    pm.expect(jsonData.data.active.deliveryMethod).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: active.language is ok\", function () {",
											"    pm.expect(jsonData.data.active.language).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: active.memberShip is ok\", function () {",
											"    pm.expect(jsonData.data.active.memberShip).to.be.eq(\"new value\")",
											"})",
											"  ",
											"pm.test(\"Response format: active.pushToken is ok\", function () {",
											"    pm.expect(jsonData.data.active.pushToken).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: active.store is ok\", function () {",
											"    pm.expect(jsonData.data.active.store).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: profile.birthDate is ok\", function () {",
											"    pm.expect(jsonData.data.profile.birthDate).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: profile.firstName is ok\", function () {",
											"    pm.expect(jsonData.data.profile.firstName).to.be.eq(\"new value\")",
											"})",
											"",
											"",
											"pm.test(\"Response format: profile.gender is ok\", function () {",
											"    pm.expect(jsonData.data.profile.gender).to.be.eq(\"UNKNOWN\")",
											"})",
											"pm.test(\"Response format: profile.lastName is ok\", function () {",
											"    pm.expect(jsonData.data.profile.lastName).to.be.eq(\"new value\")",
											"})          ",
											"",
											"pm.test(\"Response format: profile.middleName is ok\", function () {",
											"    pm.expect(jsonData.data.profile.middleName).to.be.eq(\"new value\")",
											"})          ",
											"",
											"    pm.test(\"Response format: profile.mobilePhone is ok\", function () {",
											"        pm.expect(jsonData.data.profile.mobilePhone).to.be.eq(pm.environment.get(\"mobilePhone\"))",
											"})          ",
											"          ",
											"",
											"pm.test(\"Response format: profile.avatar is ok\", function () {",
											"    pm.expect(jsonData.data.profile.avatar).to.be.not.eq(\"new value\")",
											"})  ",
											"        ",
											"if (pm.environment.get(\"project\") == \"shopify\") {",
											"    //in shopify we can change en email",
											"pm.test(\"Response format: profile.email is ok\", function () {",
											"    pm.expect(jsonData.data.profile.email).to.be.eq(pm.environment.get(\"updateEmail\"))",
											"})             ",
											"} else {",
											"  pm.test(\"Response format: profile.email is ok\", function () {",
											"    pm.expect(jsonData.data.profile.email).to.be.not.eq(pm.environment.get(\"updateEmail\"))",
											"})  ",
											"}",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);",
											"",
											"",
											"const updateEmail = pm.environment.replaceIn(\"{{$randomFirstName}}{{$randomInt}}@mail.ru\");",
											"pm.environment.set(\"updateEmail\", \"2\" + updateEmail);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"active\": {\n        \"address\": \"new value\",\n        \"cart\": \"new value\",\n        \"creditCard\": \"new value\",\n        \"deliveryMethod\": \"new value\",\n        \"language\": \"new value\",\n        \"memberShip\": \"new value\",\n        \"pushToken\": \"new value\",\n        \"store\": \"new value\"\n    },\n    \"profile\": {\n        \"avatar\": \"new value\",\n        \"birthDate\": \"new value\",\n        \"email\": \"{{updateEmail}}\",\n        \"firstName\": \"new value\",\n        \"gender\": \"new value\",\n        \"lastName\": \"new value\",\n        \"middleName\": \"new value\",\n        \"mobilePhone\": \"{{mobilePhone}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Profile - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"active\": {\n        \"address\": \"new value\",\n        \"cart\": \"new value\",\n        \"creditCard\": \"new value\",\n        \"deliveryMethod\": \"new value\",\n        \"language\": \"new value\",\n        \"memberShip\": \"new value\",\n        \"pushToken\": \"new value\",\n        \"store\": \"new value\"\n    },\n    \"profile\": {\n        \"avatar\": \"new value\",\n        \"birthDate\": \"new value\",\n        \"email\": \"new value\",\n        \"firstName\": \"new value\",\n        \"gender\": \"new value\",\n        \"lastName\": \"new value\",\n        \"middleName\": \"new value\",\n        \"mobilePhone\": \"new value\"\n    }\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save Avatar",
					"item": [
						{
							"name": "Save User Avatar: Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    })",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"pm.response.to.have.jsonBody(\"data\");",
											"",
											"pm.test(\"Response format: active.address is ok\", function () {",
											"    pm.expect(jsonData.data.avatar).to.be.not.null",
											"    pm.environment.set(\"avatarUrl\", jsonData.data.avatar);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"avatar\": \"\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/avatar",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"avatar"
									]
								},
								"description": "<h1>Save User Avatar </h1>\n<b>At the moment this API does not work</b><br/>\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\"<br/>\n\n<b>avatar</b> - a string, base64 encoded image content\n<h2>Response</h2>\n<b>avatarUrl</b> - a string, a link to the image on the file storage"
							},
							"response": []
						},
						{
							"name": "Save User Avatar: Image Exists In GCP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "HEAD",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{avatarUrl}}",
									"host": [
										"{{avatarUrl}}"
									]
								},
								"description": "<h1>Save User Avatar </h1>\n<b>At the moment this API does not work</b><br/>\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\"<br/>\n\n<b>avatar</b> - a string, base64 encoded image content\n<h2>Response</h2>\n<b>avatarUrl</b> - a string, a link to the image on the file storage"
							},
							"response": []
						},
						{
							"name": "Get User Profile - Avatar URL Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})}",
											"",
											"var jsonData = pm.response.json(); ",
											"pm.response.to.have.jsonBody(\"data\");",
											"",
											"pm.test(\"Response format: avatar exists\", function () {",
											"    pm.expect(jsonData.data.profile.avatar).to.be.eq(pm.environment.get(\"avatarUrl\"));",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save User Avatar - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"avatar\": \"\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/avatar",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"avatar"
									]
								},
								"description": "<h1>Save User Avatar </h1>\n<b>At the moment this API does not work</b><br/>\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\"<br/>\n\n<b>avatar</b> - a string, base64 encoded image content\n<h2>Response</h2>\n<b>avatarUrl</b> - a string, a link to the image on the file storage"
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Avatar",
					"item": [
						{
							"name": "Delete User Avatar Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/avatar",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"avatar"
									]
								},
								"description": "<h1>Delete User Avatar</h1>\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\"<br/>\n\n<h2>Response</h2>\nThe API returns HttpStatus 204, it sets \"avatar\" in the user profile to \"\" and deletes the image from the file storage"
							},
							"response": []
						},
						{
							"name": "Get User Profile - Avatar URL Is Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})}",
											"",
											"var jsonData = pm.response.json(); ",
											"pm.response.to.have.jsonBody(\"data\");",
											"",
											"pm.test(\"Response format: avatar exists\", function () {",
											"    pm.expect(jsonData.data.profile.avatar).to.be.eq(\"\");",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User Avatar - Fail: bac access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/avatar",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"avatar"
									]
								},
								"description": "<h1>Delete User Avatar</h1>\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\"<br/>\n\n<h2>Response</h2>\nThe API returns HttpStatus 204, it sets \"avatar\" in the user profile to \"\" and deletes the image from the file storage"
							},
							"response": []
						}
					]
				},
				{
					"name": "Recovery Password",
					"item": [
						{
							"name": "Request recovery password - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{userNameMigration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/recover/password",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"recover",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request recovery password - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{userNameMigration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/recover/password",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"recover",
										"password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reset Password",
					"item": [
						{
							"name": "Reset Password: Success",
							"item": [
								{
									"name": "Request Reset password - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    if (pm.environment.get(\"project\") != \"shopify\")",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"password\", \"string1\")",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newPassword\": \"string1\",\n  \"password\": \"12345678\",\n  \"username\": \"{{userNameMigration}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverUrl}}/users/change/password",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"change",
												"password"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login - Success: after password reset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    if (pm.environment.get(\"project\") != \"shopify\")",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
													"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"string1\",\n    \"username\": \"{{userNameMigration}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/authorization/signin",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"authorization",
												"signin"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Request Reset password - Success: email that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    if (pm.environment.get(\"project\") != \"shopify\")",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"string1\",\n  \"password\": \"12345678\",\n  \"username\": \"11{{userNameMigration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/change/password",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"change",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Reset password - Fail: bad current password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"    if (pm.environment.get(\"project\") != \"shopify\")",
											"        pm.test(\"Status code is 400\", function () {",
											"            pm.response.to.have.status(400);",
											"        }",
											"    )",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"string1\",\n  \"password\": \"12345678\",\n  \"username\": \"{{userNameMigration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/change/password",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"change",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Reset password - Fail: access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"    if (pm.environment.get(\"project\") != \"shopify\")",
											"        pm.test(\"Status code is 403\", function () {",
											"            pm.response.to.have.status(403);",
											"        }",
											"    )",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"string1\",\n  \"password\": \"12345678\",\n  \"username\": \"{{userNameMigration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/change/password",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"change",
										"password"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Addresses",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Create New Session - Success: For Addresses Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.accessToken\");",
											"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/create",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Success: For Addresses Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.originalUserId\");",
											"            pm.expect(jsonData.data.originalUserId.length).gt(0);",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{userNameMigration}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/authorization/signin",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"authorization",
										"signin"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create User Address",
					"item": [
						{
							"name": "Create New Address - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.addressId\");",
											"            pm.environment.set(\"addressId\", jsonData.data.addressId); ",
											"   ",
											"            if (pm.environment.get(\"project\") == \"shopify\") {",
											"                pm.expect(jsonData.addressLine1).not.eq(null);",
											"            }",
											"",
											"             if (pm.environment.get(\"project\") == \"core\") {",
											"                 pm.expect(jsonData.city).not.eq(null);",
											"              }",
											"   ",
											"   ",
											"    });",
											"",
											"",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);",
											"",
											"const addressLine1 = pm.environment.replaceIn(\"{{$randomStreetAddress}}@shelfytest.io\");",
											"pm.environment.set(\"addressLine1\", addressLine1);",
											"",
											"const addressLine2 = pm.environment.replaceIn(\"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\" + \"/\" + \"{{$randomInt}}\");",
											"pm.environment.set(\"addressLine2\", addressLine2);",
											"",
											"const apprtmentNumber = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"apprtmentNumber\", apprtmentNumber);",
											"",
											"const city = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"city\", city);",
											"",
											"const companyName = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"companyName\", companyName);",
											"",
											"const house = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"house\", house);",
											"",
											"const addressName = pm.environment.replaceIn(\"{{$randomCity}}\");",
											"pm.environment.set(\"addressName\", addressName);",
											"",
											"const country = pm.environment.replaceIn(\"Israel\");",
											"pm.environment.set(\"country\", country);",
											"",
											"const zipCode = pm.environment.replaceIn(\"{{$randomCountry}}\");",
											"pm.environment.set(\"zipCode\", zipCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"companyName\": \"{{companyName}}\",\n        \n        \"city\": \"{{city}}\",\n      \n        \"country\": \"{{country}}\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Address - Fail: address already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n        \"country\": \"{{country}}\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Address - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"apartment\": \"{{apprtmentNumber}}\",\n        \"city\": \"{{city}}\",\n        \"companyName\": \"{{companyName}}\",\n        \"country\": \"{{country}}\",\n        \"floor\": \"string\",\n        \"house\": \"{{house}}\",\n        \"location\": \"string\",\n        \"name\": \"{{addressName}}\",\n        \"placeId\": \"string\",\n        \"province\": \"string\",\n        \"street\": \"string\",\n        \"zip\": \"{{zipCode}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User Addresses",
					"item": [
						{
							"name": "Get All User's Addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data).to.be.a('array');",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All User's Addresses - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User Address By Id",
					"item": [
						{
							"name": "Get Address By Id - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})}",
											"",
											"pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data.addressId).to.be.eq(pm.environment.get(\"addressId\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{addressId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Address By Id - Fail: address does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{badAddressId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses",
										"{{badAddressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Address By Id - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{addressId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update User Address",
					"item": [
						{
							"name": "Update Address - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"pm.response.to.have.jsonBody(\"data\");",
											"",
											"pm.test(\"Response format: addressLine1 is ok\", function () {",
											"    pm.expect(jsonData.data.addressLine1).to.be.eq(\"new value\")",
											"})",
											"",
											"pm.test(\"Response format: addressLine2 is ok\", function () {",
											"            pm.expect(jsonData.data.addressLine2).to.be.eq(\"new value\")",
											"})",
											"",
											"//need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"pm.test(\"Response format: city is ok\", function () {",
											"            pm.expect(jsonData.data.city).to.be.eq(\"new value\")",
											"})",
											"",
											"",
											"pm.test(\"Response format: companyName is ok\", function () {",
											"            pm.expect(jsonData.data.companyName).to.be.eq(\"new value\")",
											"})",
											"//need to fix this test for random countries that will work with other systems.",
											"// if (pm.environment.get(\"project\") != \"shopify\")",
											"// pm.test(\"Response format: country is ok\", function () {",
											"//                         pm.expect(jsonData.data.country).to.be.eq(\"new value\")",
											"// })",
											"  ",
											"  //need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"pm.test(\"Response format: floor is ok\", function () {",
											"                       pm.expect(jsonData.data.floor).to.be.eq(\"new value\")",
											"})",
											"",
											"//need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"pm.test(\"Response format: house is ok\", function () {",
											"                        pm.expect(jsonData.data.house).to.be.eq(\"new value\")",
											"})",
											"",
											"//need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"pm.test(\"Response format: location is ok\", function () {",
											"                         pm.expect(jsonData.data.location).to.be.eq(\"new value\")",
											"})",
											"//need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"pm.test(\"Response format: name is ok\", function () {",
											"                         pm.expect(jsonData.data.name).to.be.eq(\"new value\")",
											"})",
											"",
											"//need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"  pm.test(\"Response format: placeId is ok\", function () {",
											"                         pm.expect(jsonData.data.placeId).to.be.eq(\"new value\")",
											"})",
											"pm.test(\"Response format: province is ok\", function () {",
											"                         pm.expect(jsonData.data.province).to.be.eq(\"new value\")",
											"})          ",
											"//need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"         pm.test(\"Response format: street is ok\", function () {",
											"                         pm.expect(jsonData.data.street).to.be.eq(\"new value\")",
											"})          ",
											"//need to fix scripts to work with Shopify",
											"if (pm.environment.get(\"project\") != \"shopify\")",
											"         pm.test(\"Response format: zip is ok\", function () {",
											"                         pm.expect(jsonData.data.zip).to.be.eq(\"new value\")",
											"})          ",
											"          ",
											"           ",
											"            ",
											"        "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"addressLine1\": \"new value\",\n    \"addressLine2\": \"new value\",\n    \"apartment\": \"new value\",\n    \"city\": \"new value\",\n    \"companyName\": \"new value\",\n    \"country\": \"Israel\",\n    \"floor\": \"new value\",\n    \"house\": \"new value\",\n    \"location\": \"new value\",\n    \"name\": \"new value\",\n    \"placeId\": \"new value\",\n    \"province\": \"new value\",\n    \"street\": \"new value\",\n    \"zip\": \"new value\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{addressId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Address - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"addressLine1\": \"new value\",\n    \"addressLine2\": \"new value\",\n    \"apartment\": \"new value\",\n    \"city\": \"new value\",\n    \"companyName\": \"new value\",\n    \"country\": \"new value\",\n    \"floor\": \"new value\",\n    \"house\": \"new value\",\n    \"location\": \"new value\",\n    \"name\": \"new value\",\n    \"place_id\": \"new value\",\n    \"province\": \"new value\",\n    \"street\": \"new value\",\n    \"zip\": \"new value\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{addressId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Address - Fail: address does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"addressLine1\": \"new value\",\n    \"addressLine2\": \"new value\",\n    \"apartment\": \"new value\",\n    \"city\": \"new value\",\n    \"companyName\": \"new value\",\n    \"country\": \"new value\",\n    \"floor\": \"new value\",\n    \"house\": \"new value\",\n    \"location\": \"new value\",\n    \"name\": \"new value\",\n    \"place_id\": \"new value\",\n    \"province\": \"new value\",\n    \"street\": \"new value\",\n    \"zip\": \"new value\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{badAddressId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses",
										"{{badAddressId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User Address",
					"item": [
						{
							"name": "Delete User Address",
							"item": [
								{
									"name": "Delete Address By Id - Fail: bad access token Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{addressId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"addresses",
												"{{addressId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Address By Id - Success: Address not found after delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{addressId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"addresses",
												"{{addressId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Address By Id - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/addresses/{{addressId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Stores",
			"item": [
				{
					"name": "Add Store To User",
					"item": [
						{
							"name": "Add Store",
							"item": [
								{
									"name": "Add Store - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"storeId\", storeId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"storeId\": \"{{storeId}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Stores - Success: find added store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"     pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"",
													"            function checkStoreId(store) {",
													"                return store.storeId === pm.environment.get(\"storeId\");",
													"            }",
													"            ",
													"            pm.expect(jsonData.data.find(checkStoreId)).not.null",
													"    });",
													"",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add Store - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"storeId\": {{storeId}}\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/stores",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"stores"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove Store From User",
					"item": [
						{
							"name": "Remove Store",
							"item": [
								{
									"name": "Add Store - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"storeId\", storeId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"storeId\": \"{{storeId}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Store - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"storeId\", storeId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores/{{storeId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores",
												"{{storeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Store - Success Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
													"pm.environment.set(\"storeId\", storeId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores/{{storeId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores",
												"{{storeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Stores - Success: find added store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"     pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"",
													"            function checkStoreId(store) {",
													"  return store.storeId === pm.environment.get(\"storeId\");",
													"}",
													"    pm.expect(jsonData.data.find(checkStoreId)).is.undefined ",
													"    });",
													"",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/stores",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"stores"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Remove Store - Fail: bad access toke",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/stores/{{storeId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"stores",
										"{{storeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All User's Stores",
					"item": [
						{
							"name": "Get All Stores - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"     pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data).to.be.a('array');",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/stores",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"stores"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Stores - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/stores",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"stores"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Products",
			"item": [
				{
					"name": "Set User's Product Rate",
					"item": [
						{
							"name": "Check Rate Calculation",
							"item": [
								{
									"name": "Create New Session - Success: check rata calculation #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"                       pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"                       pm.environment.set(\"checkRateCalculatioanProductId\", pm.globals.replaceIn(\"{{$randomInt}}_{{$randomCity}}\"));",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Users Products Rate: Success User 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"            pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.rate\");",
													"            pm.expect(jsonData.data.rate).eq(2);",
													"            pm.expect(jsonData.data.rateCount).eq(1);",
													"            ",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rate\": 2\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/rate",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"products",
												"{{checkRateCalculatioanProductId}}",
												"rate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create New Session - Success: check rata calculation #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"                       pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Users Products Rate: Success User 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"            pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.rate\");",
													"            pm.expect(jsonData.data.rateAvg).eq(2.5);",
													"            pm.expect(jsonData.data.rateCount).eq(2);       ",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rate\": 3\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/rate",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"products",
												"{{checkRateCalculatioanProductId}}",
												"rate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create New Session - Success: check rata calculation #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"                       pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Users Products Rate: Success User 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"            pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.rate\");",
													"            pm.expect(jsonData.data.rateAvg.toString().substring(0,4)).eq(\"2.33\");",
													"            pm.expect(jsonData.data.rateCount).eq(3);   ",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rate\": 2\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/rate",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"products",
												"{{checkRateCalculatioanProductId}}",
												"rate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Set Users Products Rate Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"            pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.rate\");",
											"            pm.expect(jsonData.data.rate).eq(2);",
											"            pm.environment.set(\"rate\", jsonData.data.rate);",
											"            pm.environment.set(\"rateAvg\", jsonData.data.rateAvg);",
											"            pm.environment.set(\"rateCount\", jsonData.data.rateCount);",
											"            pm.environment.set(\"isFavorite\", jsonData.data.isFavorite);",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rate\": 2\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{productIdForRate1}}/rate",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{productIdForRate1}}",
										"rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Users Products Rate Success: check double rate - no changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"            pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.rate\");",
											"            pm.expect(jsonData.data.rate).eq(pm.environment.get(\"rate\"));",
											"        ",
											"             pm.expect(jsonData.data.rateAvg.toString().substring(0,4)).eq(pm.environment.get(\"rateAvg\").toString().substring(0,4));",
											"            pm.expect(jsonData.data.rateCount).eq(pm.environment.get(\"rateCount\"));",
											"            pm.expect(jsonData.data.isFavorite).eq(pm.environment.get(\"isFavorite\"));",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rate\": 2\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{productIdForRate1}}/rate",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{productIdForRate1}}",
										"rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Users Products Rate - Fail: bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rate\": 2\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{productIdForRate1}}/rate",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{productIdForRate1}}",
										"rate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User's Products",
					"item": [
						{
							"name": "Get User's Products: Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.jsonBody(\"data.\" + pm.environment.get(\"checkRateCalculatioanProductId\"));",
											"    ",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"storeId\", storeId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User's Products: Fail - bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"storeId\", storeId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Set Favorite Product",
					"item": [
						{
							"name": "Set Favorite Product: Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"            pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data.isFavorite).eq(true);            ",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/favorite",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}",
										"favorite"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Favorite Product: Fail - bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"           ",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/favorite",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}",
										"favorite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove Favorite Product",
					"item": [
						{
							"name": "Remove Favorite Product: Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"            pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data.isFavorite).eq(false);            ",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/favorite",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}",
										"favorite"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Favorite Product: Fail - bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"           ",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/favorite",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}",
										"favorite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Set Product Comment",
					"item": [
						{
							"name": "Set product comment: Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"            pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data.comment).eq(\"asd\");            ",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment\": \"asd\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/comment",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set product comment: Fail - bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment\": \"asd\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}/comment",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}",
										"comment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User's Product By Id",
					"item": [
						{
							"name": "Get User's Products: Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.productId).eq(pm.environment.get(\"checkRateCalculatioanProductId\"));",
											"    ",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"storeId\", storeId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User's Products: Fail - bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const storeId = pm.environment.replaceIn(\"{{$randomInt}}\");",
											"pm.environment.set(\"storeId\", storeId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/{{checkRateCalculatioanProductId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"{{checkRateCalculatioanProductId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Batch Products",
					"item": [
						{
							"name": "Set batch products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"            pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.productId1\");",
											"            pm.response.to.have.jsonBody(\"data.productId2\");",
											"            pm.response.to.have.jsonBody(\"data.productId3\");",
											"            pm.expect(jsonData.data.productId1.comment).eq(\"xx\");  ",
											"            pm.expect(jsonData.data.productId2.isFavorite).eq(true);  ",
											"            pm.expect(jsonData.data.productId3.rate).eq(5);  ",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rates\": {\n    \"productId1\": {\n        \"comment\": \"xx\"\n    },\n    \"productId2\": {\n        \"isFavorite\": true\n    },\n    \"productId3\": {\n        \"rate\": 5\n    }   \n    }\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/multi/rate",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"multi",
										"rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set batch products: Fail - bad access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"           ",
											"})}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rates\": {\n    \"productId1\": {\n        \"comment\": \"xx\"\n    },\n    \"productId2\": {\n        \"isFavorite\": true\n    },\n    \"productId3\": {\n        \"rate\": 5\n    }   \n    }\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}/products/multi/rate",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"products",
										"multi",
										"rate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Carts",
			"item": [
				{
					"name": "Create User Cart",
					"item": [
						{
							"name": "Create New Session - Create User Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.accessToken\");",
											"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
											"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
											"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/create",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user cart: Success - with severl products, excluding quantity 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            ",
											"            pm.expect(jsonData.data.cartId).not.null;",
											"            pm.expect(jsonData.data.products).to.be.a('array');",
											"            pm.expect(jsonData.data.products.length).eq(2);",
											"            pm.expect(jsonData.data.name).eq(\"string\");",
											"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/current/carts",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						},
						{
							"name": "Get User Profile - Check Active Cart Is Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data.active.cart).eq(pm.environment.get(\"currentCartId\"));",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user cart: Fail - Bad Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/current/carts",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						},
						{
							"name": "Create user cart: Fail - Bad Accept-Language Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/current/carts",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						}
					]
				},
				{
					"name": "Replace User Cart",
					"item": [
						{
							"name": "Replace By Current",
							"item": [
								{
									"name": "Create New Session - Replace User Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user cart: Success - with severl products, excluding quantity 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.null;",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.name).eq(\"string\");",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Replace user cart: Success - with severl products, excluding quantity 0 Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.null;",
													"            pm.expect(jsonData.data.name).eq(\"string2\");",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.products[0].productId).eq(\"string5\");",
													"            pm.expect(jsonData.data.products[0].quantity).eq(2.2);",
													"            pm.expect(jsonData.data.products[1].productId).eq(\"string5\");",
													"            pm.expect(jsonData.data.products[1].quantity).eq(2.2);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string2\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "Replace By Id",
							"item": [
								{
									"name": "Create New Session - Replace User Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user cart: Success - with severl products, excluding quantity 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.null;",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.name).eq(\"string\");",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Replace user cart: Success - with severl products, excluding quantity 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).eq(pm.environment.get(\"currentCartId\"))",
													"            pm.expect(jsonData.data.name).eq(\"string2\");",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"        ",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.products[0].productId).eq(\"string5\");",
													"            pm.expect(jsonData.data.products[0].quantity).eq(2.2);",
													"            pm.expect(jsonData.data.products[1].productId).eq(\"string5\");",
													"            pm.expect(jsonData.data.products[1].quantity).eq(2.2);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string2\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/{{currentCartId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"{{currentCartId}}"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "Replace user cart: Fail - Bad AccessToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"       ",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"string2\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/current/carts/current",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts",
										"current"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						},
						{
							"name": "Replace user cart: Fail - Bad Accept-Language Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"string2\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string5\",\n            \"quantity\": 2.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/current/carts/current",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts",
										"current"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User Carts",
					"item": [
						{
							"name": "Create New Session - Get User Carts Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.response.to.have.jsonBody(\"data.accessToken\");",
											"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
											"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
											"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/session/create",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"session",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All User's Carts: create a new cart if there are no carts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data).to.be.a('array');",
											"            pm.expect(jsonData.data.length).eq(1);",
											"            pm.environment.set(\"currentCartId\", jsonData.data[0].cartId);",
											"    });",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/current/carts",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						},
						{
							"name": "Get User Profile - Check Active Cart Is Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"        pm.test(\"Response format is ok\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.response.to.have.jsonBody(\"data\");",
											"            pm.expect(jsonData.data.active.cart).eq(pm.environment.get(\"currentCartId\"));",
											"    });",
											"})}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"project\") == \"shopify\") ",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/{{userId}}",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All User's Carts: Fail - Bad Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"    ",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/current/carts",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						},
						{
							"name": "Get All User's Carts: Fail - Bad Accept-Language Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    ",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/current/carts",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User Cart By Id",
					"item": [
						{
							"name": "Get Cart By Id Or Current - create a cart if there no carts",
							"item": [
								{
									"name": "Create New Session - Get User Cart By Id Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Cart By Id: create a new cart if there are no carts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            console.log(jsonData.data.cartId)",
													"            pm.expect(jsonData.data.cartId).not.null",
													"             pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Get User Profile - Check Active Cart Is Set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.active.cart).eq(pm.environment.get(\"currentCartId\"));",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Cart By Id",
							"item": [
								{
									"name": "Get User Cart By Specified Id: Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.cartId).eq(pm.environment.get(\"currentCartId\"));",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/{{currentCartId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"{{currentCartId}}"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Cart By Current",
							"item": [
								{
									"name": "Get User Profile - Set Current Cart From Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.environment.set(\"currentCartId\", jsonData.data.active.cart);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Cart By \"Current\": Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.cartId).eq(pm.environment.get(\"currentCartId\"));",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "Get User Cart By Id: Fail - Bad Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"       ",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/current/carts/current",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts",
										"current"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						},
						{
							"name": "Get User Cart By Id: Fail - Bad Accept-Language Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"       ",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/current/carts/current",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts",
										"current"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User Cart",
					"item": [
						{
							"name": "Delete By Current",
							"item": [
								{
									"name": "Create New Session - Delete User Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user cart: Success - with severl products, excluding quantity 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.null;",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.products[0].variantId).eq(\"string\");",
													"            pm.expect(jsonData.data.products[0].productId).eq(\"string\");",
													"            pm.expect(jsonData.data.name).eq(\"string\");",
													"            pm.expect(jsonData.data.products[0].quantity).eq(1.2);",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Delete user cart: Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Get current user cart: Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"         pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.eq(pm.environment.get(\"currentCartId\"));",
													"           ",
													"    });",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete By Id",
							"item": [
								{
									"name": "Create New Session - Delete User Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user cart: Success - with severl products, excluding quantity 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.null;",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.expect(jsonData.data.name).eq(\"string\");",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"string\",\n    \"products\": [\n        {\n            \"variantId\": \"string\",\n            \"productId\": \"string\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string2\",\n            \"productId\": \"string3\",\n            \"quantity\": 1.2\n        },\n        {\n            \"variantId\": \"string1\",\n            \"productId\": \"string1\",\n            \"quantity\": 0.0\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Delete user cart: Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/{{currentCartId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"{{currentCartId}}"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Get current user cart: Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"         pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.cartId).not.eq(pm.environment.get(\"currentCartId\"));",
													"           ",
													"    });",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete user cart: Fail - Bad Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{serverUrl}}/users/current/carts/current",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts",
										"current"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						}
					]
				},
				{
					"name": "Add/Update Product Quantity",
					"item": [
						{
							"name": "Add/Update Product - Create  a new cart, if there are no carts",
							"item": [
								{
									"name": "Create New Session - Create User Cart Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add/Update Product: Success - create a new cart if there are no carts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(1);",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variantId\": \"string\",\n    \"productId\": \"string\",\n    \"quantity\": 1.2\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current/product",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current",
												"product"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Get User Profile - Check Active Cart Is Set Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.expect(jsonData.data.active.cart).eq(pm.environment.get(\"currentCartId\"));",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"project\") == \"shopify\") ",
													"    setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/{{userId}}",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "By Current Cart",
							"item": [
								{
									"name": "Create New Session - Create User Cart Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.response.to.have.jsonBody(\"data.accessToken\");",
													"            pm.response.to.have.jsonBody(\"data.refreshToken\");",
													"            pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
													"            pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
													"    });",
													"})}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"applicationId\": \"{{applicationId}}\", \n    \"deviceType\": \"{{deviceType}}\"\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/session/create",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"session",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Current User Cart: Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								},
								{
									"name": "Add/Update Product: Success - create a new cart if there are no carts Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(1);",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variantId\": \"string\",\n    \"productId\": \"string\",\n    \"quantity\": 1.2\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current/product",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current",
												"product"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "By Current By Id - Add new product",
							"item": [
								{
									"name": "Add/Update Product: Success - Add New Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(2);",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variantId\": \"string1\",\n    \"productId\": \"string2\",\n    \"quantity\": 1.2\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current/product",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current",
												"product"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "By Current By Id - Delete Product",
							"item": [
								{
									"name": "Add/Update Product: Success - Add New Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"{",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"        pm.test(\"Response format is ok\", function () {",
													"            var jsonData = pm.response.json();",
													"            pm.response.to.have.jsonBody(\"data\");",
													"            ",
													"            pm.expect(jsonData.data.products).to.be.a('array');",
													"            pm.expect(jsonData.data.products.length).eq(1);",
													"            pm.environment.set(\"currentCartId\", jsonData.data.cartId);",
													"    });",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;charset=UTF-8",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variantId\": \"string1\",\n    \"productId\": \"string2\",\n    \"quantity\": 0\n}"
										},
										"url": {
											"raw": "{{serverUrl}}/users/current/carts/current/product",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"users",
												"current",
												"carts",
												"current",
												"product"
											]
										},
										"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
									},
									"response": []
								}
							]
						},
						{
							"name": "Add/Update Product: Fail - Bad Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"        ",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{brokenAccessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variantId\": \"string\",\n    \"productId\": \"string\",\n    \"quantity\": 1.2\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/current/carts/current/product",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts",
										"current",
										"product"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						},
						{
							"name": "Add/Update Product: Fail - Bad Accept-Language Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"{",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{accessToken}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variantId\": \"string\",\n    \"productId\": \"string\",\n    \"quantity\": 1.2\n}"
								},
								"url": {
									"raw": "{{serverUrl}}/users/current/carts/current/product",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										"current",
										"carts",
										"current",
										"product"
									]
								},
								"description": "<h1>Get All User's Carts</h1>\n\nIf a user does not have carts - a new cart will be created.\nThis cart will be set as \"current\" cart for the user.\n\n<h2>Request</h2>\nIn the URL path - need to provide userId or \"current\".\n\n<h2>Response</h2>\n<b>data</b> - array of cart objects<br/>\n\n<h4>Cart Object</H4>\n<b>cartId</b> - string, unique cartId<br/>\n<b>name</b> - string, cart name<br/>\n<b>createdAt</b> - date<br/>\n<b>updatedAt</b> - date<br/>\n<b>products</b> - array of products<br/>\n\n<h4>Product Object</H4>\n<b>productId</b> - string, unique productId<br/>\n<b>variantId</b> - string, unique variantId<br/>\n<b>quantity</b> - double, product amount in the cart<br/>\n<b>images</b> - image object<br/>\n\n<h4>Image Object</h4>\n<b>url</b> - string, url for main variant image<br/>\n<b>shadowUrl</b> - string, url for shadow variant image<br/>\n\n<h2>Errors</h2>"
							},
							"response": []
						}
					]
				},
				{
					"name": "Price Calculation",
					"item": []
				}
			]
		},
		{
			"name": "User Credit Cards",
			"item": [
				{
					"name": "Get Credit Cards",
					"item": []
				},
				{
					"name": "Generate iframeUrl",
					"item": []
				}
			]
		},
		{
			"name": "User Orders",
			"item": [
				{
					"name": "Get All Orders",
					"item": []
				},
				{
					"name": "Get Order By Id",
					"item": []
				}
			]
		},
		{
			"name": "CheckOut",
			"item": []
		},
		{
			"name": "Addresses",
			"item": [
				{
					"name": "Validation",
					"item": []
				},
				{
					"name": "AutoComplete",
					"item": []
				}
			]
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "Version's Config",
					"item": [
						{
							"name": "Get Version's Config",
							"item": []
						},
						{
							"name": "Update Version's Config",
							"item": []
						}
					]
				},
				{
					"name": "Homepage",
					"item": [
						{
							"name": "Get Homepage",
							"item": []
						},
						{
							"name": "Update Homepage",
							"item": []
						}
					]
				},
				{
					"name": "Mandatory Update",
					"item": [
						{
							"name": "Update Mandatory Update Configuration",
							"item": []
						}
					]
				}
			]
		}
	]
}